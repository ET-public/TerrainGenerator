// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain



//the snoise function is from a unity forum and is not made by me
//the compute shader that calculates the heightmap is at the bottom and is made by me
#define NOISE_SIMPLEX_1_DIV_289 0.00346020761245674740484429065744f

float mod289(float x) {
	return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
}

float2 mod289(float2 x) {
	return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
}

float3 mod289(float3 x) {
	return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
}

float4 mod289(float4 x) {
	return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
}

float permute(float x) {
	return mod289(
		x*x*34.0 + x
	);
}

float3 permute(float3 x) {
	return mod289(
		x*x*34.0 + x
	);
}

float4 permute(float4 x) {
	return mod289(
		x*x*34.0 + x
	);
}



float4 grad4(float j, float4 ip)
{
	const float4 ones = float4(1.0, 1.0, 1.0, -1.0);
	float4 p, s;
	p.xyz = floor( frac(j * ip.xyz) * 7.0) * ip.z - 1.0;
	p.w = 1.5 - dot( abs(p.xyz), ones.xyz );
	

	p.xyz -= sign(p.xyz) * (p.w < 0);
	
	return p;
}


float snoise(float2 v)
{
	const float4 C = float4(
		0.211324865405187, 
		0.366025403784439, 
	 -0.577350269189626, 
		0.024390243902439  
	);
	
	float2 i = floor( v + dot(v, C.yy) );
	float2 x0 = v - i + dot(i, C.xx);
	

	int2 i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
	float4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	
	i = mod289(i); 
	float3 p = permute(
		permute(
				i.y + float3(0.0, i1.y, 1.0 )
		) + i.x + float3(0.0, i1.x, 1.0 )
	);
	
	float3 m = max(
		0.5 - float3(
			dot(x0, x0),
			dot(x12.xy, x12.xy),
			dot(x12.zw, x12.zw)
		),
		0.0
	);
	m = m*m ;
	m = m*m ;
	

	
	float3 x = 2.0 * frac(p * C.www) - 1.0;
	float3 h = abs(x) - 0.5;
	float3 ox = floor(x + 0.5);
	float3 a0 = x - ox;

	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

	float3 g;
	g.x = a0.x * x0.x + h.x * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}




float inverseLerp(float a, float b, float value){
    return saturate((value-a)/(b-a));
}


int vkx;
float xpos;
float zpos;
float velikost;
float razdalja;
float seedx;
float seedy;

RWStructuredBuffer<float3> Result;

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x = Result[id.x].x*velikost + xpos;
    float z = Result[id.x].z*velikost + zpos;
	float h = 0;
	float frequency = 1.0;
	float reduce = 1.0;
	float maxValue = 0.0;
	float2 v = float2(x*0.001+1.2, z*0.001+1.3);
	for(int i = 0; i < 5; i++){
		h += snoise(v * frequency) * reduce;
		maxValue += reduce;
		reduce *= 0.4;
		frequency *= 2.0;
	}
    
	float lv = 0.5;
	float blend = 4.0;
	float tmask = smoothstep(lv - blend / 2, lv + blend / 2, h);
	float mult = 180/maxValue;
	float2 t = float2(x - seedx, z - seedy);
	float dis = t.x*t.x + t.y*t.y;
	float visina = h*mult*tmask+20;
	if(dis > razdalja){
		mult = lerp(1, 0, inverseLerp(razdalja,razdalja*5, dis));
		visina *= mult;
	}

    Result[id.x] = float3(Result[id.x].x*velikost, visina, Result[id.x].z*velikost);
}




